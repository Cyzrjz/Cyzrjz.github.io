<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础理论 on W31c0me t0 My610g</title>
    <link>https://cyzrjz.github.io/tags/%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/</link>
    <description>Recent content in 基础理论 on W31c0me t0 My610g</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Apr 2025 22:06:54 +0800</lastBuildDate>
    <atom:link href="https://cyzrjz.github.io/tags/%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ret2syscall</title>
      <link>https://cyzrjz.github.io/post/ret2syscall/</link>
      <pubDate>Sat, 19 Apr 2025 22:06:54 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/ret2syscall/</guid>
      <description>&lt;h2 id=&#34;前置知识&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86&#34;&gt;&lt;/a&gt;&#xA;前置知识&#xA;&lt;/h2&gt;&lt;p&gt;假设有以下程序&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shellcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;my_puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shellcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;my_puts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码很简单,就是输出字符串&amp;quot;hello world&amp;quot;&#xA;但这一串代码在操作系统层面如何实现?&lt;/p&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;flowchart LR&#xA;    A[&#34;my_puts()&#34;] --&gt; B[&#34;write()&#34;] --&gt; C[&#34;sys_write()&#34;] --&gt; D[&#34;标准输出&#34;]&#xA;&lt;/pre&gt;&#xA;&lt;p&gt;my_puts()调用了动态链接库libc.so中的write()函数&#xA;write(1,&amp;amp;&amp;ldquo;hello world&amp;rdquo;,12)&#xA;write()将传入参数包装为汇编代码&lt;code&gt;[eax = 4;ebx = 1;ecx = &amp;amp;&amp;quot;hello world&amp;quot;;edx = 12;] + int 0x80;&lt;/code&gt;&#xA;&lt;strong&gt;write()函数其实就是对write系统调用的封装&lt;/strong&gt;&#xA;执行完成后才进入了内核kernel中的sys_write()函数&#xA;sys_write()函数会将字符串&amp;quot;hello world&amp;quot;写入到标准输出设备中&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ret2libc(未完成)</title>
      <link>https://cyzrjz.github.io/post/ret2libc/</link>
      <pubDate>Sat, 19 Apr 2025 14:13:28 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/ret2libc/</guid>
      <description>&lt;h2 id=&#34;前置知识&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86&#34;&gt;&lt;/a&gt;&#xA;前置知识&#xA;&lt;/h2&gt;&lt;h3 id=&#34;got表和plt表&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#got%e8%a1%a8%e5%92%8cplt%e8%a1%a8&#34;&gt;&lt;/a&gt;&#xA;GOT表和PLT表&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;GOT: Global Offset Table, 全局偏移表，包含所有需要动态链接的外部函数的地址(在第一次执行后)&lt;/li&gt;&#xA;&lt;li&gt;PLT: Procedure Link Table, 过程链接表，包含调用外部函数的跳转指令(跳转到GOT表中)，以及初始化外部调用指令(用于链接器动态绑定dl_runtime_resolve)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;延迟绑定机制&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%bb%b6%e8%bf%9f%e7%bb%91%e5%ae%9a%e6%9c%ba%e5%88%b6&#34;&gt;&lt;/a&gt;&#xA;延迟绑定机制&#xA;&lt;/h3&gt;&lt;p&gt;在 Linux 下，动态链接采用“懒绑定”（lazy binding）策略：&lt;strong&gt;编译器将对外部函数（如 foo）的调用编译进 PLT（Procedure Linkage Table） 中的伪代码，而函数真正的地址保存在 GOT（Global Offset Table） 中。首次调用时，通过 PLT0 跳入动态链接器执行符号解析（即 _dl_runtime_resolve），并将解析结果回写到 GOT 条目；后续调用则直接通过 GOT 跳转到实际函数地址，省去额外解析开销。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
