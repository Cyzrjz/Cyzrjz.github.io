<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn on W31c0me t0 My610g</title>
    <link>https://cyzrjz.github.io/tags/pwn/</link>
    <description>Recent content in Pwn on W31c0me t0 My610g</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Apr 2025 14:13:28 +0800</lastBuildDate>
    <atom:link href="https://cyzrjz.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ret2libc</title>
      <link>https://cyzrjz.github.io/post/ret2libc/</link>
      <pubDate>Sat, 19 Apr 2025 14:13:28 +0800</pubDate>
      <guid>https://cyzrjz.github.io/post/ret2libc/</guid>
      <description>&lt;h2 id=&#34;前置知识&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86&#34;&gt;&lt;/a&gt;&#xA;前置知识&#xA;&lt;/h2&gt;&lt;h3 id=&#34;got表和plt表&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#got%e8%a1%a8%e5%92%8cplt%e8%a1%a8&#34;&gt;&lt;/a&gt;&#xA;GOT表和PLT表&#xA;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;GOT: Global Offset Table, 全局偏移表，包含所有需要动态链接的外部函数的地址(在第一次执行后)&lt;/li&gt;&#xA;&lt;li&gt;PLT: Procedure Link Table, 过程链接表，包含调用外部函数的跳转指令(跳转到GOT表中)，以及初始化外部调用指令(用于链接器动态绑定dl_runtime_resolve)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;延迟绑定机制&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%bb%b6%e8%bf%9f%e7%bb%91%e5%ae%9a%e6%9c%ba%e5%88%b6&#34;&gt;&lt;/a&gt;&#xA;延迟绑定机制&#xA;&lt;/h3&gt;&lt;p&gt;动态链接的程序是在运行时需要对全局和静态数据访问进行GOT定位，然后间接寻址。同样，对于模块间的调用也需要GOT定位，再才间接跳转，这么做势必会影响到程序的运行速度。而且程序在运行时很大一部分函数都可能用不到，于是ELF采用了&lt;strong&gt;当函数第一次使用时才进行绑定&lt;/strong&gt;的思想，也就是我们所说的延迟绑定。ELF实现延迟绑定是通过PLT ，原先 GOT 中存放着全局变量和函数调用，现在把他拆成两个部分&lt;code&gt;.got&lt;/code&gt;和&lt;code&gt;.got.plt&lt;/code&gt;用&lt;code&gt;.got&lt;/code&gt;存放着全局变量引用，用&lt;code&gt;.got.plt&lt;/code&gt;存放着函数引用&#xA;以调用system为例&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
