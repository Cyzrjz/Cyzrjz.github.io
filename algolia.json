
[
  
  
  {
    "objectID": "1745071614",
    "permalink": "/post/ret2syscall/",
    "title": "Ret2syscall(未完成)",
    
    "content": " 前置知识 假设有以下程序\n#include \u0026lt;stdio.h\u0026gt; char shellcode[0x100] = \u0026#34;hello world\u0026#34;; my_puts(){ write(1, shellcode, 0x100); } int main(){ my_puts(); return 0; } 代码很简单,就是输出字符串\u0026quot;hello world\u0026quot; 但这一串代码在操作系统层面如何实现?\nflowchart LR A[\"my_puts()\"] --\u003e B[\"write()\"] --\u003e C[\"sys_write()\"] --\u003e D[\"标准输出\"] my_puts()调用了动态链接库libc.so中的write()函数 write(1,\u0026amp;\u0026ldquo;hello world\u0026rdquo;,12) write()将传入参数包装为汇编代码[eax = 4;ebx = 1;ecx = \u0026amp;\u0026quot;hello world\u0026quot;;edx = 12;] + int 0x80; write()函数其实就是对write系统调用的封装 执行完成后才进入了内核kernel中的sys_write()函数 sys_write()函数会将字符串\u0026quot;hello world\u0026quot;写入到标准输出设备中\n什么是系统调用 系统调用是操作系统提供给用户态程序调用的接口，它是操作系统内核与用户态程序之间的接口，它提供了系统调用的入口，用户态程序通过系统调用与内核进行交互。 本质上时一些内核函数代码(一段指令),以规范的方式驱动硬件 x86通过int 0x80指令实现系统调用,amd64通过syscall指令实现系统调用 什么是libc.so 这是一个动态链接库，它包含了系统调用的实现，如open(),read(),write()等等,libc.so随着系统版本更新也会进行更新 操作系统如何调用不同版本的libc的同一个函数呢? 这里可以类比Windows系统创建的快捷方式,无论软件版本怎么变化,快捷方式都指向同一个文件,当快捷方式被点击时,系统会自动调用对应的程序 system()函数 有了上面的基础,可以知道system()其实是对execve()系统调用的封装,execve()可以执行外部可执行文件,system()可以执行外部命令\nmov eax, 0xb ; execve系统调用号,在x86架构中,eax寄存器存放系统调用号 mov ebx, [\u0026#34;/bin/sh\u0026#34;] mov ecx, 0 mov edx, 0 int 0x80 ; 调用系统调用 这段汇编实现了execve(\u0026quot;/bin/sh\u0026quot;,0,0)系统调用,即执行/bin/sh命令\n但是在程序中没有存在这一段汇编怎么办? 请看ROP-返回导向编程\nROP(Return-Oriented Programming)-返回导向编程 ROP是一种攻击技术，它利用程序的控制流和数据结构，通过控制程序的执行流程，以达到控制目标程序的目的。\n",
    
    "date": "2025-04-19 22:06:54",
    "updated": "2025-04-19 22:06:54"
  }
  
  , 
  {
    "objectID": "1745043208",
    "permalink": "/post/ret2libc/",
    "title": "Ret2libc(未完成)",
    
    "content": " 前置知识 GOT表和PLT表 GOT: Global Offset Table, 全局偏移表，包含所有需要动态链接的外部函数的地址(在第一次执行后) PLT: Procedure Link Table, 过程链接表，包含调用外部函数的跳转指令(跳转到GOT表中)，以及初始化外部调用指令(用于链接器动态绑定dl_runtime_resolve) 延迟绑定机制 动态链接的程序是在运行时需要对全局和静态数据访问进行GOT定位，然后间接寻址。同样，对于模块间的调用也需要GOT定位，再才间接跳转，这么做势必会影响到程序的运行速度。而且程序在运行时很大一部分函数都可能用不到，于是ELF采用了当函数第一次使用时才进行绑定的思想，也就是我们所说的延迟绑定。ELF实现延迟绑定是通过PLT ，原先 GOT 中存放着全局变量和函数调用，现在把他拆成两个部分.got和.got.plt用.got存放着全局变量引用，用.got.plt存放着函数引用 以调用system为例\n首次调用 flowchart LR A[\u0026#34;call system\u0026#34;] --\u0026gt; B[\u0026#34;system@plt\u0026#34;] B --\u0026gt; C[\u0026#34;system@got\u0026#34;] C --\u0026gt; D[\u0026#34;glibc中的system函数地址\u0026#34;] D --\u0026gt;|\u0026#34;存储地址\u0026#34;| C D --\u0026gt; E[\u0026#34;调用system\u0026#34;] 后续调用 flowchart LR A[\u0026#34;call system\u0026#34;] --\u0026gt; B[\u0026#34;system@plt\u0026#34;] B --\u0026gt; C[\u0026#34;system@got\u0026#34;] --\u0026gt; D[\u0026#34;调用system\u0026#34;] 由于.got中已经有了system的地址，所以后续调用时直接从.got中取地址即可，而不需要再去.got.plt中寻找。\n漏洞利用原理 通过栈溢出返回system函数的真实地址，执行/bin/sh命令获取shell 现在面临两个问题\n如何获取system函数的真实地址？ /bin/sh命令的地址如何获取？ system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的 即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变 函数的真实地址 = 函数的偏移 + libc.so中的基址 可以划分为以下步骤:\n填充无用数据覆盖缓冲区 调用puts等函数,泄露已执行函数的真实地址 通过真实地址低12位 …",
    
    "date": "2025-04-19 14:13:28",
    "updated": "2025-04-19 14:13:28"
  }
  
  , 
  {
    "objectID": "1744885519",
    "permalink": "/post/z3%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3/",
    "title": "Z3约束求解",
    
    "content": " Z3约束求解 Z3是微软开源的开源软件，可以用来进行数学规划、逻辑推理、符号执行等问题的求解 常用于离散数学，逻辑学，计算机科学等领域 可以用pip安装，命令如下：\npip install z3-solver 函数介绍与使用 数据类型 数据类型 示例 解释 Bool x = Bool(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个布尔变量x Bools x, y, z = Bools(\u0026amp;lsquo;x y z\u0026amp;rsquo;) 创建三个布尔变量x,y,z,以此类推,后面的Ints,Reals,BitVecs等都可以用这种方式创建 BitVec x = BitVec(\u0026amp;lsquo;x\u0026amp;rsquo;, 8) 创建一个8位的二进制向量变量x Int x = Int(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个整数变量x Real x = Real(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个实数变量x 常用函数 函数 功能 And(a, b) 逻辑与，返回a和b的逻辑与,表示同时满足a和b Or(a, b) 逻辑或，返回a和b的逻辑或,表示满足a或b Not(a) 逻辑非，返回a的逻辑非,表示不满足a Xor(a, b) 逻辑异或，返回a和b的逻辑异或,表示满足a或b，但不同时满足 If(a, b, c) 条件选择，返回a和b的条件选择，表示满足a时返回b，否则返回c Distinct(a, b, c) 不同，返回a、b、c的不同关系，表示a、b、c中没有相同的值 Sum(a, b, c) 求和，返回a、b、c的求和，表示a、b、c的和 Implies(a, b) 蕴含，返回a和b的蕴含关系，表示a成立那b必然成立，否则无所谓 PbEq([(x, 1), (y, 2), (z, 3)] , n) 伪布尔约束,x,y,z为布尔变量,1,2,3为权重,n为目标值，表示满足x*1+y*2+z*3=n 函数详解 PbEq 用于表示多个布尔变量中恰好有几个为真 s.add(PbEq([(x, 1), (y, 2), (z, 3)], 6)) # 约束条件是x*1+y*2+z*3=6 这里约束的表达式是 变量真值 * 权重 = 目标值 当所有权重为1时，表示多个目标只有一个成立 s.add(PbEq([(x, 1), (y, 1), (z, 1)], 1)) 表示条件x,y,z …",
    
    "date": "2025-04-17 18:25:19",
    "updated": "2025-04-17 18:25:19"
  }
  
  , 
  {
    "objectID": "1744781683",
    "permalink": "/post/c++%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/",
    "title": "C++进程遍历",
    
    "content": " 遍历进程 获取系统快照 CreateToolhelp32Snapshot 函数原型 HANDLE WINAPI CreateToolhelp32Snapshot( DWORD dwFlags, DWORD th32ProcessID ); 参数 dwFlags 描述 TH32CS_INHERIT 进程的创建者可以访问进程的子进程 TH32CS_SNAPALL 在快照中包含系统中的所有进程和线程 TH32CS_SNAPHEAPLIST 在快照中包含在th32ProcessID中指定的进程的所有的堆 TH32CS_SNAPMODULE 在快照中包含在th32ProcessID中指定的进程的所有的模块 TH32CS_SNAPPROCESS 在快照中包含系统中所有的进程 TH32CS_SNAPTHREAD 在快照中包含系统中所有的线程 返回值 如果成功，则返回一个进程快照的句柄；如果失败，则返回INVALID_HANDLE_VALUE\n举例 int main() { HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); //核心函数 if(hSnapshot == INVALID_HANDLE_VALUE) { _tprintf(_T(\u0026amp;#34;CreateToolhelp32Snapshot error: %u\\n\u0026amp;#34;), GetLastError()); /* _tprintf无法输出中文，需要使用 #include \u0026amp;lt;locale.h\u0026amp;gt; setlocale(LC_ALL, \u0026amp;#34;\u0026amp;#34;); //设置本地化 */ return 0; } } 遍历进程信息 在调用 CreateToolhelp32Snapshot 创建系统快照后，首先需要用 Process32First 函数获取快照中的第一个进程信息 然后用 Process32Next 函数依次获取快照中的下一个进程信息，直到没有更多的进程信息为止。\nProcess32First和Process32Next 函数原型 BOOL WINAPI Process32First( HANDLE hSnapshot, LPPROCESSENTRY32 lppe ); BOOL WINAPI Process32Next( …",
    
    "date": "2025-04-16 13:34:43",
    "updated": "2025-04-16 13:34:43"
  }
  
]