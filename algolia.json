
[
  
  
  {
    "objectID": "1745043208",
    "permalink": "/post/ret2libc/",
    "title": "Ret2libc",
    
    "content": " ǰ��֪ʶ GOT����PLT�� GOT: Global Offset Table, ȫ��ƫ�Ʊ�������������Ҫ��̬���ӵ��ⲿ�����ĵ�ַ(�ڵ�һ��ִ�к�) PLT: Procedure Link Table, �������ӱ������������ⲿ��������תָ��(��ת��GOT����)���Լ���ʼ���ⲿ����ָ��(������������̬����dl_runtime_resolve) �ӳٰ󶨻��� ��̬���ӵĳ�����������ʱ��Ҫ��ȫ�ֺ;�̬���ݷ��ʽ���GOT��λ��Ȼ������Ѱַ��ͬ��������ģ�����ĵ���Ҳ��ҪGOT��λ���ٲż�����ת����ô���Ʊػ�Ӱ�쵽�����������ٶȡ����ҳ���������ʱ�ܴ�һ���ֺ����������ò���������ELF�����˵�������һ��ʹ��ʱ�Ž��а󶨵�˼�룬Ҳ����������˵���ӳٰ󶨡�ELFʵ���ӳٰ�����ͨ��PLT ��ԭ�� GOT �д�����ȫ�ֱ����ͺ������ã����ڰ���������������.got��.got.plt��.got������ȫ�ֱ������ã���.got.plt�����ź������� �Ե���systemΪ��\n�״ε��� flowchart LR A[\u0026#34;call system\u0026#34;] --\u0026gt; B[\u0026#34;system@plt\u0026#34;] B --\u0026gt; C[\u0026#34;system@got\u0026#34;] C --\u0026gt; D[\u0026#34;glibc�е�system������ַ\u0026#34;] D --\u0026gt;|\u0026#34;�洢��ַ\u0026#34;| C D --\u0026gt; E[\u0026#34;����system\u0026#34;] �������� flowchart LR A[\u0026#34;call system\u0026#34;] --\u0026gt; B[\u0026#34;system@plt\u0026#34;] B --\u0026gt; C[\u0026#34;system@got\u0026#34;] --\u0026gt; D[\u0026#34;����system\u0026#34;] ����.got���Ѿ�����system�ĵ�ַ�����Ժ�������ʱֱ�Ӵ�.got��ȡ��ַ���ɣ�������Ҫ��ȥ.got.plt��Ѱ�ҡ�\n©������ԭ�� …",
    
    "date": "2025-04-19 14:13:28",
    "updated": "2025-04-19 14:13:28"
  }
  
  , 
  {
    "objectID": "1745041061",
    "permalink": "/post/%E5%A0%86%E6%A0%88/",
    "title": "堆栈",
    
    "content": "block-beta block:Stack[\"堆栈\"] columns 1 A[\"块 A\"] B[\"块 B\"] C[\"块 C\"] end ",
    
    "date": "2025-04-19 13:37:41",
    "updated": "2025-04-19 13:37:41"
  }
  
  , 
  {
    "objectID": "1744885519",
    "permalink": "/post/z3%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3/",
    "title": "Z3约束求解",
    
    "content": " Z3约束求解 Z3是微软开源的开源软件，可以用来进行数学规划、逻辑推理、符号执行等问题的求解 常用于离散数学，逻辑学，计算机科学等领域 可以用pip安装，命令如下：\npip install z3-solver 函数介绍与使用 数据类型 数据类型 示例 解释 Bool x = Bool(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个布尔变量x Bools x, y, z = Bools(\u0026amp;lsquo;x y z\u0026amp;rsquo;) 创建三个布尔变量x,y,z,以此类推,后面的Ints,Reals,BitVecs等都可以用这种方式创建 BitVec x = BitVec(\u0026amp;lsquo;x\u0026amp;rsquo;, 8) 创建一个8位的二进制向量变量x Int x = Int(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个整数变量x Real x = Real(\u0026amp;lsquo;x\u0026amp;rsquo;) 创建一个实数变量x 常用函数 函数 功能 And(a, b) 逻辑与，返回a和b的逻辑与,表示同时满足a和b Or(a, b) 逻辑或，返回a和b的逻辑或,表示满足a或b Not(a) 逻辑非，返回a的逻辑非,表示不满足a Xor(a, b) 逻辑异或，返回a和b的逻辑异或,表示满足a或b，但不同时满足 If(a, b, c) 条件选择，返回a和b的条件选择，表示满足a时返回b，否则返回c Distinct(a, b, c) 不同，返回a、b、c的不同关系，表示a、b、c中没有相同的值 Sum(a, b, c) 求和，返回a、b、c的求和，表示a、b、c的和 Implies(a, b) 蕴含，返回a和b的蕴含关系，表示a成立那b必然成立，否则无所谓 PbEq([(x, 1), (y, 2), (z, 3)] , n) 伪布尔约束,x,y,z为布尔变量,1,2,3为权重,n为目标值，表示满足x*1+y*2+z*3=n 函数详解 PbEq 用于表示多个布尔变量中恰好有几个为真 s.add(PbEq([(x, 1), (y, 2), (z, 3)], 6)) # 约束条件是x*1+y*2+z*3=6 这里约束的表达式是 变量真值 * 权重 = 目标值 当所有权重为1时，表示多个目标只有一个成立 s.add(PbEq([(x, 1), (y, 1), (z, 1)], 1)) 表示条件x,y,z …",
    
    "date": "2025-04-17 18:25:19",
    "updated": "2025-04-17 18:25:19"
  }
  
  , 
  {
    "objectID": "1744781683",
    "permalink": "/post/c++%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86/",
    "title": "C++进程遍历",
    
    "content": " 遍历进程 获取系统快照 CreateToolhelp32Snapshot 函数原型 HANDLE WINAPI CreateToolhelp32Snapshot( DWORD dwFlags, DWORD th32ProcessID ); 参数 dwFlags 描述 TH32CS_INHERIT 进程的创建者可以访问进程的子进程 TH32CS_SNAPALL 在快照中包含系统中的所有进程和线程 TH32CS_SNAPHEAPLIST 在快照中包含在th32ProcessID中指定的进程的所有的堆 TH32CS_SNAPMODULE 在快照中包含在th32ProcessID中指定的进程的所有的模块 TH32CS_SNAPPROCESS 在快照中包含系统中所有的进程 TH32CS_SNAPTHREAD 在快照中包含系统中所有的线程 返回值 如果成功，则返回一个进程快照的句柄；如果失败，则返回INVALID_HANDLE_VALUE\n举例 int main() { HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); //核心函数 if(hSnapshot == INVALID_HANDLE_VALUE) { _tprintf(_T(\u0026amp;#34;CreateToolhelp32Snapshot error: %u\\n\u0026amp;#34;), GetLastError()); /* _tprintf无法输出中文，需要使用 #include \u0026amp;lt;locale.h\u0026amp;gt; setlocale(LC_ALL, \u0026amp;#34;\u0026amp;#34;); //设置本地化 */ return 0; } } 遍历进程信息 在调用 CreateToolhelp32Snapshot 创建系统快照后，首先需要用 Process32First 函数获取快照中的第一个进程信息 然后用 Process32Next 函数依次获取快照中的下一个进程信息，直到没有更多的进程信息为止。\nProcess32First和Process32Next 函数原型 BOOL WINAPI Process32First( HANDLE hSnapshot, LPPROCESSENTRY32 lppe ); BOOL WINAPI Process32Next( …",
    
    "date": "2025-04-16 13:34:43",
    "updated": "2025-04-16 13:34:43"
  }
  
]